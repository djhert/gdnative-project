#! /bin/sh

NAME=$(basename $PWD)

BOLD=$(tput bold)
GRN=$(tput setaf 2)
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
ET=$(tput sgr0)

GDHEAD=""
GDRUN=""

yn() {
    while printf $BOLD"$1 [y/n] " && read a
    do
        case $a in
            ([yY]) printf "$ET" && return 0;;
            ([nN]) printf "$ET" && return 1;;
            (*) printf $RED"$a is not valid\n"$ET;;
        esac
    done
}

if [ -d "$PWD/.git" ]; then
    echo $RED$BOLD"ERROR:$BLUE .git$RED directory already exists.  Exiting..."$ET
    exit
fi

echo $BOLD'GDNative Init'$ET
echo
echo $BOLD"--$GRN Creating base files and structure"$ET
printf "# $NAME\n" > README.md
echo "created file: 'README.md'"

cat << EOF > .gitignore
!.gdignore
*.a
*.so
*.dynlib
*.lib
*.dll
*.exe
*.out
*.app
*.x86_64
*.x86
*.apk
export.cfg
export_presets.cfg
CMakeLists.txt.user
.import/
.mono/
build/
out/
.vscode/
.vs/
EOF
echo "created file: '.gitignore'"

mkdir -vp assets scripts scenes out lib gdns source/{build,include,src}
printf "#Godot Ignore\n" > source/.gdignore
printf "#Godot Ignore\n" > out/.gdignore

echo
echo $BOLD"--$GRN Creating Godot project"$ET
cat << EOF > project.godot
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters
config_version=4
_global_script_classes=[  ]
_global_script_class_icons={
}
[application]
config/name="$NAME"
config/icon="res://icon.png"
[rendering]
environment/default_environment="res://default_env.tres"
EOF
echo "created file: 'project.godot'"

cat << EOF > default_env.tres
[gd_resource type="Environment" load_steps=2 format=2]
[sub_resource type="ProceduralSky" id=1]
[resource]
background_mode = 2
background_sky = SubResource( 1 )
EOF
echo "created file: 'default_env.tres'"

cat << EOF > source/version.hpp.in
#ifndef _@VER_NAME@_INFO
#ifdef _DEBUG
#define _@VER_NAME@_INFO ("@PROJECT_NAME@ v@_VERSION_MAJOR@.@_VERSION_MINOR@.@_VERSION_REVISION@-@_VERSION_TAG@")
#else
#define _@VER_NAME@_INFO ("@PROJECT_NAME@ v@_VERSION_MAJOR@.@_VERSION_MINOR@.@_VERSION_REVISION@")
#endif
#endif
#ifndef _@VER_NAME@_VERSION
#ifdef _DEBUG
#define _@VER_NAME@_VERSION ("@_VERSION_MAJOR@.@_VERSION_MINOR@.@_VERSION_REVISION@-@_VERSION_TAG@")
#else
#define _@VER_NAME@_VERSION ("@_VERSION_MAJOR@.@_VERSION_MINOR@.@_VERSION_REVISION@")
#endif
#endif
EOF
echo "created file: 'source/version.hpp.in'"

cat << 'EOF' > source/version.txt
# Set version number
set (_VERSION_MAJOR 0)
set (_VERSION_MINOR 0)
set (_VERSION_REVISION 0)

##=- Do not edit below this line -=##
string (TOUPPER ${PROJECT_NAME} VER_NAME)
STRING(REPLACE "-" "" VER_NAME ${VER_NAME})
execute_process(COMMAND git rev-parse --short HEAD
RESULT_VARIABLE _res_dump
OUTPUT_VARIABLE _VERSION_TAG
WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
# sometimes there is a newline depending on terminal, remove that
string(REPLACE "\n" "" _VERSION_TAG ${_VERSION_TAG})

CONFIGURE_FILE (
    "${PROJECT_SOURCE_DIR}/version.hpp.in"
    "${VERSIONS_DIR}/version-${VER_NAME}.hpp"
)
EOF
echo "created file: 'source/version.txt'"

cat << EOF > lib/lib$NAME.gdnlib
[general]
singleton=false
load_once=true
symbol_prefix="godot_"
reloadable=true
[entry]
Android.armeabi-v7a="res://lib/android/lib$NAME.armeabi-v7a.so"
Android.arm64-v8a="res://lib/android/lib$NAME.arm64-v8a.so"
Android.x86="res://lib/android/lib$NAME.x86.so"
Android.x86_64="res://lib/android/lib$NAME.x86_64.so"
Windows.64="res://lib/windows/lib$NAME.64.dll"
Windows.32="res://lib/windows/lib$NAME.32.dll"
X11.64="res://lib/linux/lib$NAME.64.so"
X11.32="res://lib/linux/lib$NAME.32.so"
[dependencies]
Android.armeabi-v7a=[  ]
Android.arm64-v8a=[  ]
Android.x86=[  ]
Android.x86_64=[  ]
Windows.64=[  ]
Windows.32=[  ]
X11.64=[  ]
X11.32=[  ]
EOF

echo "downloading file: 'icon.png'"
curl -sO https://raw.githubusercontent.com/hlfstr/gdnative-project/master/icon.png
echo "downloading file: 'source/CMakeLists.txt'"
(cd source/ && curl -sO https://raw.githubusercontent.com/hlfstr/gdnative-project/master/CMakeLists.txt)
echo "downloading file: 'source/CMakeSettings.json'"
(cd source/ && curl -sO https://raw.githubusercontent.com/hlfstr/gdnative-project/master/CMakeSettings.json)

echo
echo $BOLD"--$GRN Initializing Git"$ET
git init

echo
echo $BOLD"-- $GRN Adding the$BLUE godot-cpp$GRN submodule"$ET
git submodule add -b 3.2 https://github.com/GodotNativeTools/godot-cpp.git source/include/godot-cpp

echo
yn "Add$BLUE gdregistry$(tput setaf 7) as a submodule?"
if [ $? -eq 0 ]; then
    echo $BOLD"--$GRN Adding the$BLUE gdregistry$GRN submodule"$ET
    git submodule add https://github.com/hlfstr/gdregistry.git source/include/gdregistry
    GDHEAD="#include <gdregistry/gdregistry.hpp>"
    GDRUN="godot::GDRegistry::Run();"
fi

echo
echo $BOLD"--$GRN Init git submodules"$ET
git submodule update --init --recursive

echo
echo $BOLD"--$GRN Creating library init"$ET
cat << EOF > source/src/$NAME.cpp
#include <Godot.hpp>
$GDHEAD

// Native Init function defined by Godot
extern "C" void GDN_EXPORT godot_gdnative_init(godot_gdnative_init_options *o) {
	godot::Godot::gdnative_init(o);
}

// Native Terminate function defined by Godot
extern "C" void GDN_EXPORT godot_gdnative_terminate(godot_gdnative_terminate_options *o) {
	godot::Godot::gdnative_terminate(o);
}

// GDNative entry point defined by Godot
extern "C" void GDN_EXPORT godot_nativescript_init(void *handle) {
	godot::Godot::nativescript_init(handle);
    $GDRUN
}
EOF
echo "created file: 'source/src/$NAME.cpp'"

echo
echo $BOLD"--$GRN Commiting current project"$ET
git add .
git commit -m "hello $NAME"

echo
echo $BOLD"$BLUE$NAME$GRN setup is complete!"$ET
echo $BOLD"Set the Workspace Folder to \"$NAME\" in your IDE to edit source."
echo "To begin working in Godot, import the \"$NAME\" directory. :)$ET"
